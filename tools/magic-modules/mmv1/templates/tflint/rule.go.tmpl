// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package magicmodules

import (
	"fmt"
	"regexp"

	"github.com/terraform-linters/tflint-plugin-sdk/hclext"
	"github.com/terraform-linters/tflint-plugin-sdk/tflint"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
)

// {{ $.RuleName -}}Rule checks the pattern is valid
type {{ $.RuleName -}}Rule struct {
	tflint.DefaultRule

	resourceType  string
	attributeName string
}

// New{{ $.RuleName -}}Rule returns new rule with default attributes
func New{{ $.RuleName -}}Rule() *{{ $.RuleName -}}Rule {
	return &{{ $.RuleName -}}Rule{
		resourceType:  "{{ $.ResourceType }}",
		attributeName: "{{ $.AttributeName }}",
	}
}

// Name returns the rule name
func (r *{{ $.RuleName -}}Rule) Name() string {
	return "{{ $.Rule_name }}"
}

// Enabled returns whether the rule is enabled by default
func (r *{{ $.RuleName -}}Rule) Enabled() bool {
	return true
}

// Severity returns the rule severity
func (r *{{ $.RuleName -}}Rule) Severity() tflint.Severity {
	return tflint.ERROR
}

// Link returns the rule reference link
func (r *{{ $.RuleName -}}Rule) Link() string {
	return ""
}

// Check checks the pattern is valid
func (r *{{ $.RuleName -}}Rule) Check(runner tflint.Runner) error {
	resources, err := runner.GetResourceContent(r.resourceType, &hclext.BodySchema{
		Attributes: []hclext.AttributeSchema{{"{{"}}Name: r.attributeName{{"}}"}},
	}, nil)
	if err != nil {
		return err
	}

	for _, resource := range resources.Blocks {
		attribute, exists := resource.Body.Attributes[r.attributeName]
		if !exists {
			continue
		}

{{ if or ($.Prop.IsA "String") ($.Prop.IsA "Enum") }}
		err := runner.EvaluateExpr(attribute.Expr, func (val string) error {
{{- end }}
{{- if $.Prop.IsA "Integer" }}
		err := runner.EvaluateExpr(attribute.Expr, func (val int) error {
{{- end }}
{{- if $.Prop.IsA "Enum" }}
			validateFunc := validation.StringInSlice([]string{{"{"}}{{ $.Prop.EnumValuesToString `"` true }}{{"}"}}, false)
{{- end }}
{{- if ne $.Prop.Validation.Regex "" }}
			validateFunc := validateRegexp(`{{ $.Prop.Validation.Regex }}`)
{{- end }}
{{- if ne $.Prop.Validation.Function "" }}
			validateFunc := {{ $.Prop.Validation.Function }}
{{- end }}

			_, errors := validateFunc(val, r.attributeName)
			for _, err := range errors {
{{- if $.Prop.Sensitive }}
				if err := runner.EmitIssue(r, fmt.Sprintf(`"%s" is invalid value`, r.attributeName), attribute.Expr.Range()); err != nil {
					return err
				}
{{ else -}}
				if err := runner.EmitIssue(r, err.Error(), attribute.Expr.Range()); err != nil {
					return err
				}
{{- end }}
			}
			return nil
		}, nil)
		if err != nil {
			return err
		}
	}

	return nil
}
